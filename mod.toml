# Config file for an example Majora's Mask: Recompiled mod.

# Fields that end up in the mod's manifest.
[manifest]

# Unique ID of this mod. Pick something long enough that it'll never be the same as any other mod.
# The name displayed in the mod management menu is separate from this so this doesn't need to be human readable.
id = "k64_archipelago_randomizer"

# Version of this mod.
version = "0.2.2"

# The name that will show up for this mod in the mod menu. This should be human readable.
display_name = "Archipelago Randomizer"

# The description that will show up when this mod is displayed in the mod menu. This should be human readable.
description =  """
This is an example mod for Majora's Mask: Recompiled that can be used as a template for creating mods. \
When this mod is enabled, you will always perform a quickspin when swinging your sword.

For more details, see https://github.com/Zelda64Recomp/MMRecompModTemplate."""

# A short description that will show up in this mod's entry in the mod list. This should be human readable and kept short
# to prevent it from being cut off due to the limited space.
short_description = "Always perform a quickspin when swinging your sword."

# Authors of this mod.
authors = [ "Silvris", "LittleCube" ]

# ID of the target recomp game.
game_id = "kirby64"

# Minimum version of the target recomp (e.g. Zelda 64: Recompiled) that this mod can run on.
minimum_recomp_version = "1.2.0"

# Dependency mods. Each entry is the mod's ID and then an optional minimum version of the dependency mod.
dependencies = [
# Example dependency:
#    "modname:1.0.0"
]

# Native libraries (e.g. DLLs) and the functions they export.
native_libraries = [
# Example native library:
    { name = "K64APClient", funcs = [
        "rando_init",
        "rando_location_is_checked",
        "rando_location_is_checked_async",
        "rando_get_death_link_pending",
        "rando_reset_death_link_pending",
        "rando_get_death_link_enabled",
        "rando_send_death_link",
        "rando_send_location",
        "rando_complete_goal",
        "rando_has_item",
        "rando_has_item_async",
        "rando_get_own_team_id",
        "rando_get_own_slot_id",
        "rando_get_items_size",
        "rando_get_item",
        "rando_get_sending_player",
        "rando_get_item_name_from_id",
        "rando_get_sending_player_name",
        "rando_get_location_item_player",
        "rando_get_location_item_name",
        "rando_get_last_location_sent",
        "rando_get_seed_name",
        "rando_connect_failed",
        "rando_is_connected",
        "rando_get_player_levels",
        ] }
]

# Inputs to the mod tool.
[inputs]

# Input elf file to generate a mod from.
elf_path = "build/mod.elf"

# Output mod filename.
mod_filename = "k64_archipelago_randomizer"

# Reference symbol files.
func_reference_syms_file = "Kirby64Syms/NK4E.syms.toml"
data_reference_syms_files = [ "Kirby64Syms/NK4E.datasyms.toml", "mod.datasyms.toml" ]

# Additional files to include in the mod.
additional_files = [ ]